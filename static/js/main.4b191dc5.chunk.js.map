{"version":3,"sources":["logo.svg","components/navbar/index.js","utility/index.js","components/imagecard/index.js","components/scoreBoard/index.js","components/carddeck/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","src","height","alt","array","temporaryValue","randomIndex","arrayCopy","map","x","currentIndex","length","Math","floor","random","ImageCard","state","mouseOver","handleMouseOver","event","setState","console","log","handleMouseExit","this","href","id","name","onClick","handleClick","image","onMouseOver","onMouseLeave","Component","ScoreBoard","score","highScore","CardDeckContainer","data","cardData","componentDidMount","updateClicked","_index","newData","isClicked","updateScore","newScore","alert","resetScore","resetData","forEach","element","shuffleCards","Utility","result","key","handleCardClick","preventDefault","target","getAttribute","index","findIndex","React","App","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b191dc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\n\nlet Navbar = function (props) {\n  return (\n    <nav className=\"navbar navbar-dark   info-color-dark justify-content-center\">\n      <span className=\"navbar-brand\">\n        <img\n          src=\"https://fontmeme.com/permalink/200603/5f60922e5be351d2ce3e32d9d13d6d21.png\"\n          height=\"35\"\n          alt=\"mdb logo\"\n          className=\"mr-1\"\n        />\n        {/* {props.title} */}\n      </span>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","// Utility Scripts\r\n\r\nexport default {\r\n  shuffle: function (array) {\r\n    // make a copy of array to alter\r\n\r\n    let arrayCopy = array.map((x) => x);\r\n\r\n    let currentIndex = arrayCopy.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = arrayCopy[currentIndex];\r\n      arrayCopy[currentIndex] = arrayCopy[randomIndex];\r\n      arrayCopy[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return arrayCopy;\r\n  },\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass ImageCard extends Component {\r\n  state = {\r\n    mouseOver: false,\r\n  };\r\n  //Method to call when card is clicked\r\n  handleMouseOver = (event) => {\r\n    this.setState({ mouseOver: true });\r\n    console.log(this.state);\r\n  };\r\n\r\n  handleMouseExit = (event) => {\r\n    this.setState({ mouseOver: false });\r\n    console.log(this.state);\r\n  };\r\n\r\n  render() {\r\n    let className = \"card-img card-img-cstm\";\r\n    className += this.state.mouseOver === true ? \" animated tada\" : \"\";\r\n    return (\r\n      <div className=\"col mb-4\">\r\n        <div className=\"card text-center\">\r\n          <a\r\n            href=\"#!\"\r\n            id={this.props.id}\r\n            name={this.props.name}\r\n            onClick={this.props.handleClick}\r\n          >\r\n            <img\r\n              className={className}\r\n              src={this.props.image}\r\n              alt=\"?\"\r\n              onMouseOver={this.handleMouseOver}\r\n              onMouseLeave={this.handleMouseExit}\r\n            />\r\n            <div\r\n              className=\"card-img-overlay rgba-white-slight\"\r\n              id={this.props.id}\r\n              name={this.props.name}\r\n              onMouseOver={this.handleMouseOver}\r\n              onMouseLeave={this.handleMouseExit}\r\n            ></div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nlet ScoreBoard = function (props) {\r\n  return (\r\n    <>\r\n      <div className=\"row text-center\">\r\n        <div className=\"col \">\r\n          <h3 className=\"mr-2\">Current Score: {props.score}</h3>\r\n        </div>\r\n        <div className=\"col\">\r\n          <h3>High Score: {props.highScore}</h3>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import React from \"react\";\nimport \"./style.css\";\nimport cardData from \"../../data/images.json\";\nimport Utility from \"../../utility\";\nimport ImageCard from \"../imagecard\";\nimport ScoreBoard from \"../scoreBoard\";\n//import MessageOverlay from \"../messageOverlay\";\n\nclass CardDeckContainer extends React.Component {\n  state = {\n    data: cardData,\n    score: 0,\n    highScore: 0,\n  };\n\n  componentDidMount = () => {\n    this.setState({ score: 0, data: cardData });\n  };\n\n  updateClicked = (_index) => {\n    //Create new array from state data\n    let newData = this.state.data;\n\n    //Change property for ID\n    newData[_index].isClicked = true;\n\n    //Save new data as state\n    this.setState({ data: newData });\n  };\n\n  updateScore = () => {\n    let newScore = this.state.score + 1;\n    if (newScore >= 12) {\n      alert(\"You Win, Try again\");\n      this.resetScore();\n      this.resetData();\n      return;\n    }\n    this.setState({\n      score: newScore,\n      highScore:\n        newScore > this.state.highScore ? newScore : this.state.highScore,\n    });\n  };\n\n  resetScore = () => {\n    this.setState({ score: 0 });\n  };\n\n  resetData = () => {\n    let newData = this.state.data;\n    newData.forEach((element) => {\n      element.isClicked = false;\n    });\n    this.setState({ data: newData });\n  };\n\n  shuffleCards = () => {\n    //shuffle data then map to elements\n    let shuffledArray = Utility.shuffle(this.state.data);\n    return shuffledArray.map((result) => (\n      <ImageCard\n        key={result.name}\n        id={result.id}\n        name={result.name}\n        image={result.image}\n        handleClick={this.handleCardClick}\n      ></ImageCard>\n    ));\n  };\n\n  handleCardClick = (event) => {\n    event.preventDefault();\n    let name = event.target.getAttribute(\"name\");\n    //Get index of Image data\n    let index = this.state.data.findIndex((element) => element.name === name);\n\n    //Check if card data has been clicked\n    if (this.state.data[index].isClicked) {\n      //End Game\n      this.resetScore();\n      this.resetData();\n      alert(\"you lose, good day!\");\n    } else {\n      //Update data\n      this.updateClicked(index);\n      this.updateScore();\n    }\n    console.log(this.state.data);\n    console.log(this.state.score);\n\n    //Shuffle;\n  };\n\n  render() {\n    return (\n      <>\n        {/* Score Board */}\n        <ScoreBoard\n          score={this.state.score}\n          highScore={this.state.highScore}\n        ></ScoreBoard>\n\n        {/* Card Deck */}\n        <div className=\"row my-3 row-cols-2 row-cols-md-4\">\n          {this.shuffleCards()}\n        </div>\n\n        {/* Overlay */}\n        {/* <MessageOverlay></MessageOverlay> */}\n      </>\n    );\n  }\n}\n\nexport default CardDeckContainer;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n//Components\nimport Navbar from \"./components/navbar\";\nimport CardDeck from \"./components/carddeck\";\n\nfunction App() {\n  return (\n    <>\n      <Navbar title=\"Memory Game\"></Navbar>\n      <div className=\"container mt-3 p-3\">\n        <CardDeck></CardDeck>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n// View - container\n//Overlay\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}